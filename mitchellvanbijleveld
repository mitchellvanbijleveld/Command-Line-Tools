#!/bin/bash
#
####################################################################################################
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
# VAR_UTILITY="mitchell"
# VAR_UTILITY_SCRIPT="vanbijleveld"
VAR_UTILITY_SCRIPT_VERSION="2024.12.17-0031"
VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS="awk basename bash date dirname echo eval exit find grep mktemp printf realpath sed shift tr type"
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# FUNCTIONS
####################################################################################################
PrintTimeStamp(){
    echo "$(date +'%Y-%m-%d %H:%M:%S') $(printf '%-32s' $var_utility/$var_utility_script) [ $(printf '%-8s' $var_log_level) ]"
}
#
PrintMessage(){
    # $1 = LOG LEVEL
    var_log_level=$1
    # $2 = UTILITY | COMMAND
    var_utility=$2
    # $3 = SCRIPT
    var_utility_script=$3
    # $4 = MESSAGE
    var_message=$4
    #
    if [[ $var_log_level == "" ]] && [[ $var_utility == "" ]] && [[ $var_utility_script == "" ]] && [[ $var_message == "" ]]; then
        case $GLOBAL_VAR_DEBUG in
            1) return 0;; 
            *) echo; return 0;;
        esac
    elif type $var_utility &> /dev/null && 
       [[ $(echo $var_utility | tr '[:lower:]' '[:upper:]') != "FIND" && $(echo $var_utility_script | tr '[:lower:]' '[:upper:]') != "FIND" ]] &&
       [[ $(echo $var_utility | tr '[:lower:]' '[:upper:]') != "SSH" && $(echo $var_utility_script | tr '[:lower:]' '[:upper:]') != "SSH" ]]; then
        #
        var_utility=$VAR_UTILITY
        var_utility_script=$VAR_UTILITY_SCRIPT
        shift
        var_executed_command=$(echo $@ | awk '{print $1}')
        #
        export VAR_TMP_FILE_COMMAND_OUTPUT=$(mktemp "mitchellvanbijleveld-$var_utility-$var_utility_script.XXXXXXXX" --tmpdir)
        #PrintMessage "DEBUG" "$var_utility" "$var_utility_script" "Created temporary file for script output: '$VAR_TMP_FILE_COMMAND_OUTPUT'..."
        #
        case $GLOBAL_VAR_DEBUG in
            1) "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT | while IFS= read -r command_output_line; do
                   echo "$(PrintTimeStamp) $var_executed_command: $command_output_line"
               done
            ;; 
            # "$@" 2>&1 | sed "s|^|$(PrintTimeStamp) $var_executed_command: |";;
            *) 
                case $var_log_level in
                    "FATAL" | "INFO" | "WARN") "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT;;
                    *) "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT > /dev/null;;
                esac
                ;;
        esac
    elif [[ $var_log_level != "" ]] && [[ $var_utility != "" ]] && [[ $var_utility_script != "" ]] && [[ $var_message != "" ]]; then
        case $GLOBAL_VAR_DEBUG in
            1) echo "$(PrintTimeStamp) $var_message"; return 0;;
            *) 
                case $var_log_level in
                    "FATAL" | "INFO" | "WARN") echo "$var_message"; return 0;;
                    *) return 0;;
                esac
                ;;
        esac
    fi
}
#
eval_FromFile(){
    # $1 = NAME OF VARIABLE
    # $2 = FILE PATH
    eval $(grep "^$1=" $2)
}
#
die_UtilityNotFound () {
    # $1 = MESSAGE
    PrintMessage "FATAL" "mitchell" "vanbijleveld" "$1"
    PrintMessage
    PrintMessage "INFO" "mitchell" "vanbijleveld" "The bin '$(basename $0)' supports the following utilities:"
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Searching for utilities in '$GLOBAL_VAR_DIR_INSTALLATION'..."
    for var_utility_dir in "$GLOBAL_VAR_DIR_INSTALLATION"/*; do
        if [[ -d  $var_utility_dir ]]; then
            var_utility=$(basename $var_utility_dir)
            PrintMessage "INFO" "mitchell" "vanbijleveld" "  - $var_utility"
        fi
    done
    PrintMessage
    exit 1
}
#
die_UtilityScriptNotFound (){
    # $1 = MESSAGE
    var_utility_scripts_found=0
    PrintMessage "FATAL" "mitchell" "vanbijleveld" "$1"
    PrintMessage
    PrintMessage "INFO" "mitchell" "vanbijleveld" "The utility '$VAR_UTILITY' supports the following scripts:"
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Searching for utility scripts in '$VAR_UTILITY_FOLDER_PATH'..."
    for var_utility_script_file in "$VAR_UTILITY_FOLDER_PATH"/*; do
        if [[ -f $var_utility_script_file ]] && [[ $var_utility_script_file == *".bash" ]]; then
            var_utility_script=$(basename $var_utility_script_file)
            PrintMessage "INFO" "mitchell" "vanbijleveld" "  - ${var_utility_script%.bash}"
            ((var_utility_scripts_found++))
        fi
    done
    if [[ $var_utility_scripts_found -eq 0 ]]; then
        PrintMessage "INFO" "mitchell" "vanbijleveld" "  No Utility Scripts available."
    fi
    PrintMessage
    exit 1
}
#
FindUtilityFolderPath(){
    # $1 = FIND FOLDER PATH
    # $2 = FIND FOLDER NAME
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Finding Utility Folder for '$2'..."
    VAR_UTILITY_FOLDER_PATH=$(find $1 -maxdepth 1 -iname "$2" -type d)
    if [[ -d $VAR_UTILITY_FOLDER_PATH ]]; then
        return 0
    else
        PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Folder for '$2' not found!"
        return 1
    fi
}
#
FindUtilityScriptFilePath(){
    # $1 = FIND FOLDER PATH
    # $2 = FIND FILE NAME
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Finding Utility Script File for '$2'..."
    VAR_UTILITY_SCRIPT_FILE_PATH=$(find $1 -maxdepth 1 -iname "$2.bash" -type f)
    if [[ -f $VAR_UTILITY_SCRIPT_FILE_PATH ]]; then
        return 0
    else
        PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script File for '$2' not found!"
        return 1
    fi
}
####################################################################################################
# FUNCTIONS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
GLOBAL_VAR_DIR_INSTALLATION=$(dirname $(realpath $0))
GLOBAL_VAR_DIR_ETC="/etc/mitchellvanbijleveld/Command-Line-Tools"
GLOBAL_VAR_DIR_TMP="/tmp/mitchellvanbijleveld/Command-Line-Tools"
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
ProcessArguments() {
#
VAR_UTILITY_SCRIPT_ARGUMENTS=()
#
VAR_UTILITY_REMOVED_FROM_ARGUMENTS=0
VAR_UTILITY_SCRIPT_REMOVED_FROM_ARGUMENTS=0
#
for var_argument in "$@"; do
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Processing argument '$var_argument'..."
    var_argument_CAPS=$(echo $var_argument | tr '[:lower:]' '[:upper:]')
    #
    case $var_argument_CAPS in
        "--DEBUG")
            GLOBAL_VAR_DEBUG=1
            PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Started logging in debug style"
        ;;
        "--UPDATE-FIRST")
            if [[ $VAR_UPDATED -eq 0 ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Script will update first..."
                VAR_UPDATE_FIRST=1
            else
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Already updated. Not updating again..."
            fi
        ;;
        *)
            if [[ $VAR_UTILITY == "" ]] && [[ $VAR_UTILITY != "--"* ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Setting '$var_argument' as VAR_UTILITY..."
                VAR_UTILITY=$var_argument_CAPS
            elif [[ $VAR_UTILITY_SCRIPT == "" ]] && [[ $VAR_UTILITY != "--"* ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Setting '$var_argument' as VAR_UTILITY_SCRIPT..."
                VAR_UTILITY_SCRIPT=$var_argument_CAPS
            elif [[ $VAR_UTILITY_SCRIPT == $var_argument_CAPS ]] && [[ $VAR_UTILITY_SCRIPT_REMOVED_FROM_ARGUMENTS -eq 0 ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Not adding first occurence of VAR_UTILITY_SCRIPT '$VAR_UTILITY_SCRIPT' to VAR_UTILITY_SCRIPT_ARGUMENTS..."
                VAR_UTILITY_SCRIPT_REMOVED_FROM_ARGUMENTS=1
            elif [[ $VAR_UTILITY == $var_argument_CAPS ]] && [[ $VAR_UTILITY_REMOVED_FROM_ARGUMENTS -eq 0 ]] && [[ $VAR_UTILITY_SCRIPT_REMOVED_FROM_ARGUMENTS -eq 0 ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Not adding first occurence of VAR_UTILITY '$VAR_UTILITY' to VAR_UTILITY_SCRIPT_ARGUMENTS..."
                VAR_UTILITY_REMOVED_FROM_ARGUMENTS=1
            else
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Ignoring argument '$var_argument'. Forwarding argument to Utility Script..."
                VAR_UTILITY_SCRIPT_ARGUMENTS+=("$var_argument")
            fi
        ;;
    esac
    #
done
#
}
ProcessArguments "$@"
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
# CHECK IF UPDATE REQUESTED
####################################################################################################
####################################################################################################
if [[ $VAR_UPDATE_FIRST -eq 1 ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Exporting functions and scripts in order to update..."
    #
    export -f PrintMessage
    export -f PrintTimeStamp
    export GLOBAL_VAR_DEBUG=$GLOBAL_VAR_DEBUG
    export GLOBAL_VAR_DIR_INSTALLATION=$GLOBAL_VAR_DIR_INSTALLATION
    #
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Starting update script..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/update.bash"
    export VAR_UPDATED=1
    #
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Restarting bin..."
    "$(realpath $0)" "$@"
    exit 0
else
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Not updating automatically..."
fi
####################################################################################################
####################################################################################################
# CHECK IF UPDATE REQUESTED
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# FIND UTILITY FOLDER PATH
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Checking variable 'VAR_UTILITY' with value '$VAR_UTILITY'..."
if [[ $VAR_UTILITY == "" ]]; then
    die_UtilityNotFound "No Utility specified!"
fi
#
if FindUtilityFolderPath "$GLOBAL_VAR_DIR_INSTALLATION" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Folder '$VAR_UTILITY' found!"
elif FindUtilityScriptFilePath "$GLOBAL_VAR_DIR_INSTALLATION/bin" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Folder '$VAR_UTILITY' was not found..."
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script '$VAR_UTILITY' found in Utility 'bin'!"
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Changing variable 'VAR_UTILITY' from '$VAR_UTILITY' to 'BIN'..."
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Changing variable 'VAR_UTILITY_SCRIPT' from '$VAR_UTILITY_SCRIPT' to '$VAR_UTILITY'..."
    VAR_UTILITY_SCRIPT=$VAR_UTILITY; VAR_UTILITY="BIN"
else
    die_UtilityNotFound "Utility '$VAR_UTILITY' not found!"  
fi
####################################################################################################
# FIND UTILITY FOLDER PATH
####################################################################################################
####################################################################################################
#
####################################################################################################
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH
####################################################################################################
if [[ ! $VAR_UTILITY_SCRIPT_FILE_PATH == "" ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script File Path is already set! No need to search for it..."
elif FindUtilityScriptFilePath "$VAR_UTILITY_FOLDER_PATH" "$VAR_UTILITY_SCRIPT"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script File '$VAR_UTILITY_SCRIPT' found in Utility '$VAR_UTILITY'!"
elif FindUtilityScriptFilePath "$VAR_UTILITY_FOLDER_PATH" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script '$VAR_UTILITY' found in Utility '$VAR_UTILITY'!"
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Changing variable 'VAR_UTILITY_SCRIPT' from '$VAR_UTILITY_SCRIPT' to '$VAR_UTILITY'..."
    VAR_UTILITY_SCRIPT=$VAR_UTILITY
elif [[ $VAR_UTILITY_SCRIPT == "" ]]; then
    die_UtilityScriptNotFound "No Utility Script specified!"
else
    die_UtilityScriptNotFound "Utility Script '$VAR_UTILITY_SCRIPT' not found within Utility '$VAR_UTILITY'!"  
fi
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH
####################################################################################################
####################################################################################################
#
#
ProcessArguments "$@"
#
#
####################################################################################################
####################################################################################################
# EXPORT FUNCTIONS
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Exporting Functions..."
export -f PrintMessage
export -f eval_FromFile
export -f PrintTimeStamp
####################################################################################################
# EXPORT FUNCTIONS
####################################################################################################
####################################################################################################
#
####################################################################################################
####################################################################################################
# EXPORT GLOBAL VARIABLES
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Exporting Global Variables..."
export GLOBAL_VAR_DEBUG=$GLOBAL_VAR_DEBUG
export GLOBAL_VAR_DIR_INSTALLATION=$GLOBAL_VAR_DIR_INSTALLATION
export GLOBAL_VAR_DIR_ETC=$GLOBAL_VAR_DIR_ETC
export GLOBAL_VAR_DIR_TMP=$GLOBAL_VAR_DIR_TMP
####################################################################################################
# EXPORT GLOBAL VARIABLES
####################################################################################################
####################################################################################################
#
####################################################################################################
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Exporting Utility Script Variables..."
export UTILITY_SCRIPT_VAR_DIR_ETC=$(echo $VAR_UTILITY_SCRIPT_FILE_PATH | sed "s|$GLOBAL_VAR_DIR_INSTALLATION|$GLOBAL_VAR_DIR_ETC|; s|.bash$||")
#export UTILITY_SCRIPT_VAR_DIR_TMP=$(echo $VAR_UTILITY_SCRIPT_FILE_PATH | sed "s|$GLOBAL_VAR_DIR_INSTALLATION|$GLOBAL_VAR_DIR_TMP|; s|.bash$||")
export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-$VAR_UTILITY-$VAR_UTILITY_SCRIPT.XXXXXXXX" --tmpdir)
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PRINT CONFIG 
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Printing configuration..."
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "GLOBAL_VAR_DIR_INSTALLATION  = $GLOBAL_VAR_DIR_INSTALLATION"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "GLOBAL_VAR_DIR_ETC           = $GLOBAL_VAR_DIR_ETC"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "GLOBAL_VAR_DIR_TMP           = $GLOBAL_VAR_DIR_TMP"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY                  = $VAR_UTILITY"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY_SCRIPT           = $VAR_UTILITY_SCRIPT"
#
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY_FOLDER_PATH      = $VAR_UTILITY_FOLDER_PATH"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY_SCRIPT_FILE_PATH = $VAR_UTILITY_SCRIPT_FILE_PATH"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "UTILITY_SCRIPT_VAR_DIR_ETC   = $UTILITY_SCRIPT_VAR_DIR_ETC"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "UTILITY_SCRIPT_VAR_DIR_TMP   = $UTILITY_SCRIPT_VAR_DIR_TMP"
####################################################################################################
# PRINT CONFIG 
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Fetching dependencies from utility script..."
eval_FromFile "VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS" $VAR_UTILITY_SCRIPT_FILE_PATH
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Starting script to check dependencies..."
$(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/CheckDependencies.bash" $VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS
#
if [[ $? -eq 1 ]]; then
    PrintMessage "FATAL" "mitchell" "vanbijleveld" "Could not start Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because dependencies are missing. Exiting..."
    exit 1
fi
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# START UTILITY SCRIPT
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' with arguments: $(printf "'%s' " "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}")"
$(which bash) $VAR_UTILITY_SCRIPT_FILE_PATH "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}"