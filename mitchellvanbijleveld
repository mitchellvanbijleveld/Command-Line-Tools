#!/bin/bash
#
####################################################################################################
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
export BIN_UTILITY="mitchell"
export BIN_UTILITY_SCRIPT="vanbijleveld"
BIN_UTILITY_SCRIPT_VERSION="2025.01.13-1222"
BIN_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS="awk basename bash date dirname echo eval exit find grep mktemp printf realpath sed shift tee tr type which"
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
export GLOBAL_VAR_DIR_INSTALLATION=$(dirname $(realpath $0))
export GLOBAL_VAR_DIR_ETC="/etc/mitchellvanbijleveld/Command-Line-Tools"
export GLOBAL_VAR_DIR_TMP="/tmp/mitchellvanbijleveld/Command-Line-Tools"
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
ProcessArguments() {
#
VAR_UTILITY_SCRIPT_ARGUMENTS=()
#
for var_argument in "$@"; do
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Processing argument '$var_argument'..."
    var_argument_CAPS=$(echo $var_argument | tr '[:lower:]' '[:upper:]')
    #
    case $var_argument_CAPS in
        "--DEBUG")
            BIN_ENABLE_DEBUG=1
        ;;
        "--DRY-RUN")
            export GLOBAL_VAR_DRY_RUN=1
        ;;
        "--HELP")
            VAR_UTILITY="Help"
            VAR_UTILITY_SCRIPT="Help"
        ;;
        "--INTERACTIVE" | "--INTERACTIVESHELL" | "--INTERACTIVE-SHELL" | "--IS")
            VAR_UTILITY="InteractiveShell"
            VAR_UTILITY_SCRIPT="InteractiveShell"
        ;;
        "--SKIP-DEPENDENCY-CHECK")
            BIN_SKIP_DEPENDENCY_CHECK=1
        ;;
        "--START-FROM-INTERACTIVE-SHELL")
            if [[ $GLOBAL_VAR_DEBUG -eq 1 ]]; then
                BIN_DISABLE_DEBUG=1
            fi
        ;;
        "--UPDATE-FIRST")
            VAR_UPDATE_FIRST=1
        ;;
        "--VERBOSE")
            export GLOBAL_VAR_VERBOSE=1
        ;;
        *)
            if [[ $VAR_UTILITY == "" ]] && [[ $var_argument_CAPS != "--"* ]]; then
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Setting '$var_argument' as VAR_UTILITY..."
                VAR_UTILITY=$var_argument_CAPS
            elif [[ $VAR_UTILITY_SCRIPT == "" ]] && [[ $var_argument_CAPS != "--"* ]]; then
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Setting '$var_argument' as VAR_UTILITY_SCRIPT..."
                VAR_UTILITY_SCRIPT=$var_argument_CAPS
            elif [[ $VAR_UTILITY == $var_argument_CAPS ]] && [[ $BIN_RECHECK_ARGUMENTS -eq 1 ]] ||
                 [[ $VAR_UTILITY_SCRIPT == $var_argument_CAPS ]] && [[ $BIN_RECHECK_ARGUMENTS -eq 1 ]]; then
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Skip setting '$var_argument' as VAR_UTILITY or VAR_UTILITY_SCRIPT because of BIN_RECHECK_ARGUMENTS is true..."
            else
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Ignoring argument '$var_argument'. Forwarding argument to Utility Script..."
                VAR_UTILITY_SCRIPT_ARGUMENTS+=("$var_argument")
            fi
        ;;
    esac
    #
done
#
}
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# FUNCTIONS
####################################################################################################
PrintLogLine_TimeStamp(){
    echo $(date +'%Y-%m-%d %H:%M:%S')
}
export -f PrintLogLine_TimeStamp
#
PrintLogLine_UtilityAndUtilityScript(){
    # $1 = UTILITY | COMMAND
    # $2 = UTILITY SCRIPT | COMMAND
    if [[ $1 == "COMMAND" ]]; then
        echo "$(printf '%-24s' $(echo "$1=$2"))"
    else
        echo "$(printf '%-24s' $(echo "$1/$2"))"
    fi
}
export -f PrintLogLine_UtilityAndUtilityScript
#
PrintLogLine_LogLevel(){
    # $1 = LOG LEVEL
    echo "[ $(printf '%-8s' "$1") ]"
}
export -f PrintLogLine_LogLevel
#
PrintMessage(){
    # $1 = LOG LEVEL  $2 = UTILITY    $3 = SCRIPT            $4 = MESSAGE | COMMAND
    var_log_level=$1; var_utility=$2; var_utility_script=$3; var_message=$4
    #
    if [[ $var_log_level == "" ]] && [[ $var_utility == "" ]] && [[ $var_utility_script == "" ]] && [[ $var_message == "" ]]; then
        if [[ $GLOBAL_VAR_DEBUG -eq 1 ]]; then 
            return 0
        else
            echo
        fi

    elif command -v "$var_message" &>/dev/null; then
        shift 3
        #
        if [[ $GLOBAL_VAR_DRY_RUN -eq 1 ]]; then
            if [[ $GLOBAL_VAR_DEBUG -eq 1 ]]; then
                echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel 'DRY RUN') $@"
            else
                echo "$(PrintLogLine_LogLevel 'DRY RUN') $@"
            fi
        else
            export VAR_TMP_FILE_COMMAND_OUTPUT=$(mktemp "mitchellvanbijleveld-$var_utility-$var_utility_script.XXXXXXXX" --tmpdir)
            if [[ $GLOBAL_VAR_DEBUG -eq 1 ]]; then
                echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript 'mitchell' 'vanbijleveld') $(PrintLogLine_LogLevel 'DEBUG') Created temporary file for script output: '$VAR_TMP_FILE_COMMAND_OUTPUT'..."
                echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript 'mitchell' 'vanbijleveld') $(PrintLogLine_LogLevel 'DEBUG') Executing command on behalf of $var_utility/$var_utility_script:"  
                echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel 'COMMAND') $@"
                eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT | while IFS= read -r command_output_line; do
                    echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel 'COMMAND') $(echo $@ | awk '{print $1}'): $command_output_line"
                done
            elif ( [[ $GLOBAL_VAR_VERBOSE -eq 1 ]] && [[ $var_log_level == "VERBOSE" ]] ) || [[ $var_log_level == "WARNING" ]]; then
                eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT | while IFS= read -r command_output_line; do
                    echo "$(PrintLogLine_LogLevel "$var_log_level") $command_output_line"
                done
            else
                if [[ $var_log_level == "DEBUG" ]] || [[ $var_log_level == "VERBOSE" ]]; then
                    eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT > /dev/null
                else
                    eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT
                fi
            fi
        fi

    elif [[ $var_log_level != "" ]] && [[ $var_utility != "" ]] && [[ $var_utility_script != "" ]] && [[ $var_message != "" ]]; then

        if [[ $GLOBAL_VAR_DEBUG -eq 1 ]]; then
            if [[ $5 == "NoNewLine" ]]; then
                echo -n "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel "$var_log_level") $var_message"
            else
                if [[ $var_utility_folder_basename == "" ]] || [[ $var_utility_script_file_basename == "" ]]; then
                    echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel "$var_log_level") $var_message"
                else
                    echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel "$var_log_level") $var_utility_folder_basename/$var_utility_script_file_basename: $var_message"
                fi
            fi
        elif [[ $GLOBAL_VAR_VERBOSE -eq 1 ]] && [[ $var_log_level == "VERBOSE" ]]; then
            if [[ $5 == "NoNewLine" ]]; then
                echo -n "$(PrintLogLine_LogLevel "$var_log_level") $var_message"
            else
                echo "$(PrintLogLine_LogLevel "$var_log_level") $var_message"
            fi
        elif [[ $var_log_level == "WARNING" ]]; then
            if [[ $5 == "NoNewLine" ]]; then
                echo -n "$(PrintLogLine_LogLevel 'WARNING') $var_message"
            else
                echo "$(PrintLogLine_LogLevel 'WARNING') $var_message"
            fi
        else
            if [[ $var_log_level == "DEBUG" ]]; then
                return 0
            elif [[ $var_log_level == "CONFIG" ]]; then
                return 0
            elif [[ $var_log_level == "VERBOSE" ]]; then
                return 0
            else
                if [[ $5 == "NoNewLine" ]]; then
                    echo -n "$var_message"
                else
                    echo "$var_message"
                fi
            fi
        fi

    else
        echo "Invalid PrintMessage..."
    fi
}
export -f PrintMessage
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
PrintMessage_UnsetVariables() {
    unset PrintMessage_LogLevel
    unset PrintMessage_Utility
    unset PrintMessage_UtilityScript
    unset PrintMessage_Text
    unset PrintMessage_Command
}
#
eval_PrintMessage_Internal_UnsetVariables=$(declare -f PrintMessage_UnsetVariables | sed '
    1s/PrintMessage_UnsetVariables/PrintMessage_Internal_UnsetVariables/;
    s/PrintMessage_LogLevel/PrintMessage_Internal_LogLevel/g;
    s/PrintMessage_Utility/PrintMessage_Internal_Utility/g;
    s/PrintMessage_UtilityScript/PrintMessage_Internal_UtilityScript/g;
    s/PrintMessage_Text/PrintMessage_Internal_Text/g;
    s/PrintMessage_Command/PrintMessage_Internal_Command/g'); eval "$eval_PrintMessage_Internal_UnsetVariables"
#
export -f PrintMessage_UnsetVariables
export -f PrintMessage_Internal_UnsetVariables
#
PrintMessageV2() {
    #
    if [[ -z $@ ]]; then
        [[ $GLOBAL_VAR_DEBUG ]] || echo
        PrintMessage_UnsetVariables; return 0
    fi
    #
    #
    #
    for PrintMessage_Part in "$@"; do
        if [[ -z $PrintMessage_LogLevel ]]; then
            PrintMessage_LogLevel=$PrintMessage_Part; shift
        elif [[ -z $PrintMessage_Utility ]]; then
            PrintMessage_Utility=$PrintMessage_Part; shift
        elif [[ -z $PrintMessage_UtilityScript ]]; then
            PrintMessage_UtilityScript=$PrintMessage_Part; shift
        elif [[ -z $PrintMessage_Text ]] && [[ -z $PrintMessage_Command ]]; then
            if [[ $PrintMessage_Utility == 'COMMAND' ]]; then
                PrintMessage_Text=$@
            else
                if [[ $PrintMessage_Part == $(which $PrintMessage_Part) ]]; then
                    PrintMessage_Command=$PrintMessage_Part; shift
                fi
                #
                PrintMessage_Text=$@
            fi
            #
            if [[ -z $PrintMessage_Text ]]; then
                PrintMessage_Text=' '
            fi
        fi
    done
    #
    #
    #
    if [[ -z $PrintMessage_LogLevel ]] || [[ -z $PrintMessage_Utility ]] || [[ -z $PrintMessage_UtilityScript ]] || [[ -z $PrintMessage_Text ]]; then
        echo "!!!!! INVALID PRINTMESSAGE: ONE OF THE VALUES IS EMPTY !!!!!"
        PrintMessage_UnsetVariables; return 0
    fi
    #
    #
    #
    if [[ $PrintMessage_Command ]]; then
        #
        if [[ $GLOBAL_VAR_DRY_RUN ]]; then
            PrintMessage_Internal "DRY RUN" "$PrintMessage_Utility" "$PrintMessage_UtilityScript" "$PrintMessage_Command $PrintMessage_Text"
        else
            PrintMessage_Internal "COMMAND" "$PrintMessage_Utility" "$PrintMessage_UtilityScript" "$PrintMessage_Command $PrintMessage_Text"
            #
            eval $PrintMessage_Command $PrintMessage_Text 2>&1 | while IFS= read -r PrintMessage_Command_Result; do
                PrintMessage_Internal "$PrintMessage_LogLevel" "COMMAND" "$PrintMessage_Command" "$PrintMessage_Command_Result"
            done       
        fi
        #
        PrintMessage_UnsetVariables; return 0
    fi
    #
    #
    #
    if [[ $GLOBAL_VAR_DEBUG ]]; then
        case $PrintMessage_LogLevel in
            'COMMAND' | 'CONFIG' | 'DEBUG' | 'DRY RUN' | 'FATAL' | 'INFO' | 'VERBOSE' | 'WARNING')
                echo "$(PrintLogLine_TimeStamp)" "$(PrintLogLine_UtilityAndUtilityScript "$PrintMessage_Utility" "$PrintMessage_UtilityScript")" "$(PrintLogLine_LogLevel "$PrintMessage_LogLevel")" "$PrintMessage_Text"
            ;;
            *) echo "$(PrintLogLine_TimeStamp)" "$(PrintLogLine_UtilityAndUtilityScript "$PrintMessage_Utility" "$PrintMessage_UtilityScript")" "$(PrintLogLine_LogLevel "$PrintMessage_LogLevel")" "!!!!! INVALID PRINTMESSAGE: LOG LEVEL '$PrintMessage_LogLevel' IS NOT SUPPORTED !!!!!";;
        esac
    else
        case $PrintMessage_LogLevel in
            'COMMAND' | 'CONFIG' | 'DEBUG') [[ $GLOBAL_VAR_DEBUG ]] && echo "$(PrintLogLine_TimeStamp)" "$(PrintLogLine_UtilityAndUtilityScript "$PrintMessage_Utility" "$PrintMessage_UtilityScript")" "$(PrintLogLine_LogLevel "$PrintMessage_LogLevel")" "$PrintMessage_Text";;
            'DRY RUN' | 'FATAL' | 'WARNING') echo "$(PrintLogLine_LogLevel "$PrintMessage_LogLevel")" "$PrintMessage_Text";;
            'INFO') echo "$PrintMessage_Text";;
            'VERBOSE') 
            if [[ $GLOBAL_VAR_VERBOSE ]]; then
                if [[ $PrintMessage_Utility == "COMMAND" ]]; then
                    echo "$(PrintLogLine_LogLevel "$PrintMessage_LogLevel")" "$(echo $(PrintLogLine_UtilityAndUtilityScript "$PrintMessage_Utility" "$PrintMessage_UtilityScript")):" "$PrintMessage_Text"
                else
                    echo "$(PrintLogLine_LogLevel "$PrintMessage_LogLevel")" "$PrintMessage_Text"
                fi
            fi
            ;;
            *) echo "!!!!! INVALID PRINTMESSAGE: LOG LEVEL '$PrintMessage_LogLevel' IS NOT SUPPORTED !!!!!";;
        esac
    fi
    #
    #
    #
    PrintMessage_UnsetVariables; return 0
}
#
eval_PrintMessage_Internal=$(declare -f PrintMessageV2 | sed '
    1s/PrintMessageV2/PrintMessage_Internal/;
    s/PrintMessage_UnsetVariables/PrintMessage_Internal_UnsetVariables/g;
    s/PrintMessage_LogLevel/PrintMessage_Internal_LogLevel/g;
    s/PrintMessage_Utility/PrintMessage_Internal_Utility/g;
    s/PrintMessage_UtilityScript/PrintMessage_Internal_UtilityScript/g;
    s/PrintMessage_Text/PrintMessage_Internal_Text/g;
    s/PrintMessage_Command/PrintMessage_Internal_Command/g'); eval "$eval_PrintMessage_Internal"
export -f PrintMessageV2
export -f PrintMessage_Internal
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################
#
eval_FromFile(){
    # $1 = NAME OF VARIABLE
    # $2 = FILE PATH
    if grep -q "^$1=" "$2"; then
        eval $(grep "^$1=" "$2")
    else
        eval "$1="
    fi
}
export -f eval_FromFile
#
die_UtilityNotFound () {
    # $1 = MESSAGE
    # $2 = NAME OF SUB DIRECTORY
    PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "$1"
    PrintMessage
    if [[ $2 == "" ]]; then
        var_search_dir=$GLOBAL_VAR_DIR_INSTALLATION
        PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin 'mitchellvanbijleveld' supports the following utilities:"
    else
        var_search_dir="$GLOBAL_VAR_DIR_INSTALLATION/$2"
        PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The $2 Utility supports the following utilities:"
    fi    
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Searching for utilities in '$var_search_dir'..."
    for var_utility_dir in "$var_search_dir"/*; do
        if [[ -d  $var_utility_dir ]]; then
            var_utility=$(basename $var_utility_dir)
            PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "  - $var_utility"
        fi
    done
    PrintMessage
    exit 1
}
export -f die_UtilityNotFound
#
die_UtilityScriptNotFound (){
    # $1 = MESSAGE
    # $2 = NAME OF SUB UTILITY
    var_utility_scripts_found=0
    PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "$1"
    PrintMessage
    if [[ $2 == "" ]]; then
        PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The utility '$(basename $VAR_UTILITY_FOLDER_PATH)' supports the following utility scripts:"
    else
        PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The $2 Utility '$(basename $VAR_UTILITY_FOLDER_PATH)' supports the following utility scripts:"
    fi   
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Searching for utility scripts in '$VAR_UTILITY_FOLDER_PATH'..."
    for var_utility_script_file in "$VAR_UTILITY_FOLDER_PATH"/*; do
        if [[ -f $var_utility_script_file ]] && [[ $var_utility_script_file == *".bash" ]]; then
            var_utility_script=$(basename $var_utility_script_file)
            PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "  - ${var_utility_script%.bash}"
            ((var_utility_scripts_found++))
        fi
    done
    if [[ $var_utility_scripts_found -eq 0 ]]; then
        PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "  No Utility Scripts available."
    fi
    PrintMessage
    exit 1
}
export -f die_UtilityScriptNotFound
#
FindUtilityFolderPath(){
    # $1 = FIND FOLDER PATH
    # $2 = FIND FOLDER NAME
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Finding Utility Folder for '$2' in '$1'..."
    if [[ $2 == *"/"* ]]; then
        VAR_UTILITY_FOLDER_PATH=$(find -L "$1/$2" -maxdepth 0 -type d)
    else
        VAR_UTILITY_FOLDER_PATH=$(find -L $1 -maxdepth 1 -iname "$2" -type d)
    fi
    #
    if [[ -d $VAR_UTILITY_FOLDER_PATH ]]; then
        VAR_UTILITY_FOLDER_PATH=$(realpath $VAR_UTILITY_FOLDER_PATH)
        return 0
    else
        PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Folder for '$2' not found!"
        return 1
    fi
}
export -f FindUtilityFolderPath
#
FindUtilityScriptFilePath(){
    # $1 = FIND FOLDER PATH
    # $2 = FIND FILE NAME
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Finding Utility Script File for '$2'..."
    VAR_UTILITY_SCRIPT_FILE_PATH=$(find -L $1 -maxdepth 1 -iname "$2.bash" -type f)
    if [[ -f $VAR_UTILITY_SCRIPT_FILE_PATH ]]; then
        return 0
    else
        PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script File for '$2' not found!"
        return 1
    fi
}
export -f FindUtilityScriptFilePath
#
ForEachUtilityScript(){
    # $1 = FUNCTION TO EXECUTE
    for var_utility_folder in $GLOBAL_VAR_DIR_INSTALLATION/*; do
        unset var_utility_folder_basename
        if [[ -d $var_utility_folder ]]; then
            var_utility_folder_basename=$(basename $var_utility_folder)
            PrintMessage "DEBUG" "$VAR_UTILITY" "$VAR_UTILITY_SCRIPT" "Currently checking Utility '$var_utility_folder_basename'..."
        else
            continue
        fi
        #
        for var_utility_script_file in $var_utility_folder/*; do
            unset var_utility_script_file_basename
            if [[ -d $var_utility_script_file ]]; then
                for var_utility_script_file in $var_utility_script_file/*; do
                    if [[ -f $var_utility_script_file ]] && [[ $var_utility_script_file == *".bash" ]]; then
                        var_utility_folder_basename="$(basename $(dirname $(dirname $var_utility_script_file)))/$(basename $(dirname $var_utility_script_file))"
                        var_utility_script_file_basename=$(basename $var_utility_script_file)
                        PrintMessage "DEBUG" "$VAR_UTILITY" "$VAR_UTILITY_SCRIPT" "Currently checking Utility '$var_utility_folder_basename' Script '$var_utility_script_file_basename'..."
                        #
                        # 
                        #
                        $1 $@
                        #
                        #
                        #
                    else
                        continue
                    fi
                done
            elif [[ -f $var_utility_script_file ]] && [[ $var_utility_script_file == *".bash" ]]; then
                var_utility_folder_basename=$(basename $var_utility_folder)
                var_utility_script_file_basename=$(basename $var_utility_script_file)
                PrintMessage "DEBUG" "$VAR_UTILITY" "$VAR_UTILITY_SCRIPT" "Currently checking Utility '$var_utility_folder_basename' Script '$var_utility_script_file_basename'..."
                #
                # 
                #
                $1 $@
                #
                #
                #
            else
                continue
            fi
        done
    done
}
export -f ForEachUtilityScript
####################################################################################################
# FUNCTIONS
####################################################################################################
####################################################################################################
#
#
ProcessArguments "$@"
#
#
if [[ $BIN_ENABLE_DEBUG -eq 1 ]] && [[ $BIN_RESTARTED -ne 1 ]]; then
    export GLOBAL_VAR_DEBUG=1
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin will be restarted in order to enable debug logging..."
    export BIN_RESTARTED=1; "$(realpath $0)" "$@"; exit 0

elif [[ $BIN_DISABLE_DEBUG -eq 1 ]] && [[ $BIN_RESTARTED -ne 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin will be restarted in order to disable debug logging..."
    export GLOBAL_VAR_DEBUG=0
    export BIN_RESTARTED=1; "$(realpath $0)" "$@"; exit 0

elif [[ $BIN_RESTARTED -eq 1 ]]; then
    export BIN_RESTARTED=0
fi
#
if [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "BIN" ]] && [[ $VAR_UTILITY_SCRIPT == "UPDATE" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not updating automatically because 'bin' 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "UPDATE" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not updating automatically because 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Updating bin, utilities and utility scripts..."
    #
    export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-bin-update-before-run.XXXXXXXX" --tmpdir)
    #
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Running update script..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/update.bash"
    export VAR_UPDATE_DONE=1

    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin will be restarted in order to complete the update..."
    export BIN_RESTARTED=1
    "$(realpath $0)" "$@"
    exit 0
fi
#
#
#
#
#
####################################################################################################
####################################################################################################
# FIND UTILITY FOLDER PATH
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Checking variable 'VAR_UTILITY' with value '$VAR_UTILITY'..."
if [[ $VAR_UTILITY == "" ]]; then
    die_UtilityNotFound "No Utility specified!"
fi
#
if FindUtilityFolderPath "$GLOBAL_VAR_DIR_INSTALLATION" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Folder '$VAR_UTILITY' found!"
elif FindUtilityScriptFilePath "$GLOBAL_VAR_DIR_INSTALLATION/bin" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Folder '$VAR_UTILITY' was not found..."
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script '$VAR_UTILITY' found in Utility 'bin'!"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Changing variable 'VAR_UTILITY' from '$VAR_UTILITY' to 'BIN'..."
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Changing variable 'VAR_UTILITY_SCRIPT' from '$VAR_UTILITY_SCRIPT' to '$VAR_UTILITY'..."
    VAR_UTILITY_SCRIPT=$VAR_UTILITY; VAR_UTILITY="BIN"; BIN_RECHECK_ARGUMENTS=1
else
    die_UtilityNotFound "Utility '$VAR_UTILITY' not found!"  
fi
####################################################################################################
# FIND UTILITY FOLDER PATH
####################################################################################################
####################################################################################################
#
####################################################################################################
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH
####################################################################################################
if [[ ! $VAR_UTILITY_SCRIPT_FILE_PATH == "" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script File Path is already set! No need to search for it..."
elif FindUtilityScriptFilePath "$VAR_UTILITY_FOLDER_PATH" "$VAR_UTILITY_SCRIPT"; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script File '$VAR_UTILITY_SCRIPT' found in Utility '$VAR_UTILITY'!"
elif FindUtilityScriptFilePath "$VAR_UTILITY_FOLDER_PATH" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script '$VAR_UTILITY' found in Utility '$VAR_UTILITY'!"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Changing variable 'VAR_UTILITY_SCRIPT' from '$VAR_UTILITY_SCRIPT' to '$VAR_UTILITY'..."
    VAR_UTILITY_SCRIPT=$VAR_UTILITY; BIN_RECHECK_ARGUMENTS=1
elif [[ $VAR_UTILITY_SCRIPT == "" ]]; then
    die_UtilityScriptNotFound "No Utility Script specified!"
else
    die_UtilityScriptNotFound "Utility Script '$VAR_UTILITY_SCRIPT' not found within Utility '$VAR_UTILITY'!"  
fi
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH
####################################################################################################
####################################################################################################
#
#
if [[ $BIN_RECHECK_ARGUMENTS -eq 1 ]]; then
    ProcessArguments "$@"
fi
#
#
####################################################################################################
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Exporting Utility Script Variables..."
export UTILITY_SCRIPT_VAR_DIR_ETC="$GLOBAL_VAR_DIR_ETC/$(basename $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH))/$(basename $VAR_UTILITY_SCRIPT_FILE_PATH | sed 's/.bash$//')"
#export UTILITY_SCRIPT_VAR_DIR_TMP="$GLOBAL_VAR_DIR_TMP/$(basename $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH))/$(basename $VAR_UTILITY_SCRIPT_FILE_PATH | sed 's/.bash$//')"
export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-$(echo $VAR_UTILITY | sed 's|/|-|')-$VAR_UTILITY_SCRIPT.XXXXXXXX" --tmpdir)
#
if [[ $VAR_UTILITY == *"/"* ]]; then
    VAR_UTILITY="$(basename $(dirname $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH)))/$(basename $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH))"
else
    VAR_UTILITY=$(basename $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH))
fi
VAR_UTILITY_SCRIPT=$(basename $VAR_UTILITY_SCRIPT_FILE_PATH | sed 's/.bash$//')
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PRINT CONFIG 
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Printing configuration..."
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_INSTALLATION  = $GLOBAL_VAR_DIR_INSTALLATION"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_ETC           = $GLOBAL_VAR_DIR_ETC"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_TMP           = $GLOBAL_VAR_DIR_TMP"
#
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY                  = $VAR_UTILITY"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_SCRIPT           = $VAR_UTILITY_SCRIPT"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_FOLDER_PATH      = $VAR_UTILITY_FOLDER_PATH"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_SCRIPT_FILE_PATH = $VAR_UTILITY_SCRIPT_FILE_PATH"
#
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "UTILITY_SCRIPT_VAR_DIR_ETC   = $UTILITY_SCRIPT_VAR_DIR_ETC"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "UTILITY_SCRIPT_VAR_DIR_TMP   = $UTILITY_SCRIPT_VAR_DIR_TMP"
####################################################################################################
# PRINT CONFIG 
####################################################################################################
####################################################################################################
#
#
#
#
#
if [[ $(shasum $VAR_UTILITY_SCRIPT_FILE_PATH | awk '{print $1}') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709' ]]; then
    PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because it's empty. Exiting..."
    exit 0
fi
#
#
#
#
#
####################################################################################################
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
if [[ $BIN_SKIP_DEPENDENCY_CHECK -eq 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Skipping dependency check..."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Fetching dependencies from utility script..."
    eval_FromFile "VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS" $VAR_UTILITY_SCRIPT_FILE_PATH
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting script to check dependencies..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/CheckDependencies.bash" $VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS "--run-in-background"
    #
    if [[ $? -eq 1 ]]; then
        PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Could not start Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because dependencies are missing. Exiting..."
        exit 1
    fi
fi
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
# SOURCE FILES
####################################################################################################
####################################################################################################
source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/Functions/Die.bash"
####################################################################################################
####################################################################################################
# SOURCE FILES
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# START UTILITY SCRIPT
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' with arguments: $(printf "'%s' " "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}")"
$(which bash) $VAR_UTILITY_SCRIPT_FILE_PATH "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}"