#!/bin/bash
#
####################################################################################################
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
# VAR_UTILITY="mitchell"
# VAR_UTILITY_SCRIPT="vanbijleveld"
VAR_UTILITY_SCRIPT_VERSION="2025.01.02-1539"
VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS="awk basename bash date dirname echo eval exit find grep mktemp printf realpath sed shift tee tr type which"
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
export GLOBAL_VAR_DIR_INSTALLATION=$(dirname $(realpath $0))
export GLOBAL_VAR_DIR_ETC="/etc/mitchellvanbijleveld/Command-Line-Tools"
GLOBAL_VAR_DIR_TMP="/tmp/mitchellvanbijleveld/Command-Line-Tools"
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
ProcessArguments() {
#
VAR_UTILITY_SCRIPT_ARGUMENTS=()
#
for var_argument in "$@"; do
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Processing argument '$var_argument'..."
    var_argument_CAPS=$(echo $var_argument | tr '[:lower:]' '[:upper:]')
    #
    case $var_argument_CAPS in
        "--DEBUG")
            VAR_ENABLE_DEBUG=1
        ;;
        "--SKIP-DEPENDENCY-CHECK")
            VAR_SKIP_DEPENDENCY_CHECK=1
        ;;
        "--UPDATE-FIRST")
            VAR_UPDATE_FIRST=1
        ;;
        *)
            if [[ $VAR_UTILITY == "" ]] && [[ $var_argument_CAPS != "--"* ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Setting '$var_argument' as VAR_UTILITY..."
                VAR_UTILITY=$var_argument_CAPS
            elif [[ $VAR_UTILITY_SCRIPT == "" ]] && [[ $var_argument_CAPS != "--"* ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Setting '$var_argument' as VAR_UTILITY_SCRIPT..."
                VAR_UTILITY_SCRIPT=$var_argument_CAPS
            elif [[ $VAR_UTILITY == $var_argument_CAPS ]] && [[ $VAR_RECHECK_ARGUMENTS -eq 1 ]] ||
                 [[ $VAR_UTILITY_SCRIPT == $var_argument_CAPS ]] && [[ $VAR_RECHECK_ARGUMENTS -eq 1 ]]; then
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Skip setting '$var_argument' as VAR_UTILITY or VAR_UTILITY_SCRIPT because of VAR_RECHECK_ARGUMENTS is true..."
            else
                PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Ignoring argument '$var_argument'. Forwarding argument to Utility Script..."
                VAR_UTILITY_SCRIPT_ARGUMENTS+=("$var_argument")
            fi
        ;;
    esac
    #
done
#
}
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# FUNCTIONS
####################################################################################################
PrintLogLine_TimeStamp(){
    echo $(date +'%Y-%m-%d %H:%M:%S')
}
export -f PrintLogLine_TimeStamp
#
PrintLogLine_UtilityAndUtilityScript(){
    # $1 = UTILITY
    # $2 = UTILITY SCRIPT
    echo "$(printf '%-24s' $1/$2)"
}
export -f PrintLogLine_UtilityAndUtilityScript
#
PrintLogLine_LogLevel(){
    # $1 = LOG LEVEL
    echo "[ $(printf '%-6s' $1) ]"
}
export -f PrintLogLine_LogLevel
#
PrintMessage(){
    # $1 = LOG LEVEL  $2 = UTILITY    $3 = SCRIPT            $4 = MESSAGE | COMMAND
    var_log_level=$1; var_utility=$2; var_utility_script=$3; var_message=$4
    #
    if [[ $var_log_level == "" ]] && [[ $var_utility == "" ]] && [[ $var_utility_script == "" ]] && [[ $var_message == "" ]]; then
        case $GLOBAL_VAR_DEBUG in
            1) return 0;; 
            *) echo; return 0;;
        esac
    elif command -v "$var_message" &>/dev/null; then
        shift 3
        #
        var_executed_command=$(echo $@ | awk '{print $1}')
        #
        export VAR_TMP_FILE_COMMAND_OUTPUT=$(mktemp "mitchellvanbijleveld-$var_utility-$var_utility_script.XXXXXXXX" --tmpdir)
        #
        case $GLOBAL_VAR_DEBUG in
            1) 
                echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript 'mitchell' 'vanbijleveld') $(PrintLogLine_LogLevel 'DEBUG') Created temporary file for script output: '$VAR_TMP_FILE_COMMAND_OUTPUT'..."
                echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript 'mitchell' 'vanbijleveld') $(PrintLogLine_LogLevel 'DEBUG') Executing command ($@) on behalf of $var_utility/$var_utility_script..."
                eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT | while IFS= read -r command_output_line; do
                   echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel $var_log_level) $var_executed_command: $command_output_line"
                done
            ;; 
            *) 
                case $var_log_level in
                    "CONFIGURE" | "FATAL" | "INFO" | "WARN") eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT;;
                    *) eval "$@" 2>&1 | tee $VAR_TMP_FILE_COMMAND_OUTPUT > /dev/null;;
                esac
            ;;
        esac
    elif [[ $var_log_level != "" ]] && [[ $var_utility != "" ]] && [[ $var_utility_script != "" ]] && [[ $var_message != "" ]]; then
        case $GLOBAL_VAR_DEBUG in
            1) echo "$(PrintLogLine_TimeStamp) $(PrintLogLine_UtilityAndUtilityScript $var_utility $var_utility_script) $(PrintLogLine_LogLevel $var_log_level) $var_message"; return 0;;
            *) 
                case $var_log_level in
                    "CONFIGURE" | "FATAL" | "INFO" | "WARN") echo "$var_message"; return 0;;
                    *) return 0;;
                esac
                ;;
        esac
    fi
}
export -f PrintMessage
#
eval_FromFile(){
    # $1 = NAME OF VARIABLE
    # $2 = FILE PATH
    if grep -q "^$1=" "$2"; then
        eval $(grep "^$1=" "$2")
    else
        eval "$1="
    fi
}
export -f eval_FromFile
#
die_UtilityNotFound () {
    # $1 = MESSAGE
    # $2 = NAME OF SUB DIRECTORY
    PrintMessage "FATAL" "mitchell" "vanbijleveld" "$1"
    PrintMessage
    if [[ $2 == "" ]]; then
        SEARCH_DIR=$GLOBAL_VAR_DIR_INSTALLATION
        PrintMessage "INFO" "mitchell" "vanbijleveld" "The bin 'mitchellvanbijleveld' supports the following utilities:"
    else
        SEARCH_DIR="$GLOBAL_VAR_DIR_INSTALLATION/$2"
        PrintMessage "INFO" "mitchell" "vanbijleveld" "The $2 Utility supports the following utilities:"
    fi    
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Searching for utilities in '$SEARCH_DIR'..."
    for var_utility_dir in "$SEARCH_DIR"/*; do
        if [[ -d  $var_utility_dir ]]; then
            var_utility=$(basename $var_utility_dir)
            PrintMessage "INFO" "mitchell" "vanbijleveld" "  - $var_utility"
        fi
    done
    PrintMessage
    exit 1
}
export -f die_UtilityNotFound
#
die_UtilityScriptNotFound (){
    # $1 = MESSAGE
    # $2 = NAME OF SUB UTILITY
    var_utility_scripts_found=0
    PrintMessage "FATAL" "mitchell" "vanbijleveld" "$1"
    PrintMessage
    if [[ $2 == "" ]]; then
        PrintMessage "INFO" "mitchell" "vanbijleveld" "The utility '$(basename $VAR_UTILITY_FOLDER_PATH)' supports the following utility scripts:"
    else
        PrintMessage "INFO" "mitchell" "vanbijleveld" "The $2 Utility '$(basename $VAR_UTILITY_FOLDER_PATH)' supports the following utility scripts:"
    fi   
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Searching for utility scripts in '$VAR_UTILITY_FOLDER_PATH'..."
    for var_utility_script_file in "$VAR_UTILITY_FOLDER_PATH"/*; do
        if [[ -f $var_utility_script_file ]] && [[ $var_utility_script_file == *".bash" ]]; then
            var_utility_script=$(basename $var_utility_script_file)
            PrintMessage "INFO" "mitchell" "vanbijleveld" "  - ${var_utility_script%.bash}"
            ((var_utility_scripts_found++))
        fi
    done
    if [[ $var_utility_scripts_found -eq 0 ]]; then
        PrintMessage "INFO" "mitchell" "vanbijleveld" "  No Utility Scripts available."
    fi
    PrintMessage
    exit 1
}
export -f die_UtilityScriptNotFound
#
FindUtilityFolderPath(){
    # $1 = FIND FOLDER PATH
    # $2 = FIND FOLDER NAME
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Finding Utility Folder for '$2'..."
    VAR_UTILITY_FOLDER_PATH=$(find -L $1 -maxdepth 1 -iname "$2" -type d)
    if [[ -d $VAR_UTILITY_FOLDER_PATH ]]; then
        return 0
    else
        PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Folder for '$2' not found!"
        return 1
    fi
}
export -f FindUtilityFolderPath
#
FindUtilityScriptFilePath(){
    # $1 = FIND FOLDER PATH
    # $2 = FIND FILE NAME
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Finding Utility Script File for '$2'..."
    VAR_UTILITY_SCRIPT_FILE_PATH=$(find -L $1 -maxdepth 1 -iname "$2.bash" -type f)
    if [[ -f $VAR_UTILITY_SCRIPT_FILE_PATH ]]; then
        return 0
    else
        PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script File for '$2' not found!"
        return 1
    fi
}
export -f FindUtilityScriptFilePath
#
ForEachUtilityScript(){
    # $1 = FUNCTION TO EXECUTE
    for var_utility_folder in $GLOBAL_VAR_DIR_INSTALLATION/*; do
        if [[ -d $var_utility_folder ]]; then
            var_utility_folder_basename=$(basename $var_utility_folder)
        else
            continue
        fi
        #
        for var_utility_script_file in $var_utility_folder/*; do
            if [[ -d $var_utility_script_file ]]; then
                for var_utility_script_file in $var_utility_script_file/*; do
                    var_utility_folder_basename="$(basename $(dirname $(dirname $var_utility_script_file)))/$(basename $(dirname $var_utility_script_file))"
                    var_utility_script_file_basename=$(basename $var_utility_script_file)
                    #
                    # 
                    #
                    $1 $@
                    #
                    #
                    #
                done
            elif [[ -f $var_utility_script_file ]] && [[ $var_utility_script_file == *".bash" ]]; then
                var_utility_folder_basename=$(basename $var_utility_folder)
                var_utility_script_file_basename=$(basename $var_utility_script_file)
                #
                # 
                #
                $1 $@
                #
                #
                #
            else
                continue
            fi
        done
    done
}
export -f ForEachUtilityScript
####################################################################################################
# FUNCTIONS
####################################################################################################
####################################################################################################
#
#
ProcessArguments "$@"
#
#
if [[ $VAR_ENABLE_DEBUG -eq 1 ]] && [[ $VAR_BIN_RESTARTED -ne 1 ]]; then
    export GLOBAL_VAR_DEBUG=1

    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "The bin will be restarted in order to enable debug logging..."
    export VAR_BIN_RESTARTED=1
    "$(realpath $0)" "$@"
    exit 0
fi
#
if [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "BIN" ]] && [[ $VAR_UTILITY_SCRIPT == "UPDATE" ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Not updating automatically because 'bin' 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "UPDATE" ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Not updating automatically because 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Updating bin, utilities and utility scripts..."
    #
    export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-bin-update-before-run.XXXXXXXX" --tmpdir)
    #
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Running update script..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/update.bash"
    export VAR_UPDATE_DONE=1

    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "The bin will be restarted in order to complete the update..."
    export VAR_BIN_RESTARTED=1
    "$(realpath $0)" "$@"
    exit 0
fi
#
#
#
#
#
####################################################################################################
####################################################################################################
# FIND UTILITY FOLDER PATH
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Checking variable 'VAR_UTILITY' with value '$VAR_UTILITY'..."
if [[ $VAR_UTILITY == "" ]]; then
    die_UtilityNotFound "No Utility specified!"
fi
#
if FindUtilityFolderPath "$GLOBAL_VAR_DIR_INSTALLATION" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Folder '$VAR_UTILITY' found!"
elif FindUtilityScriptFilePath "$GLOBAL_VAR_DIR_INSTALLATION/bin" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Folder '$VAR_UTILITY' was not found..."
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script '$VAR_UTILITY' found in Utility 'bin'!"
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Changing variable 'VAR_UTILITY' from '$VAR_UTILITY' to 'BIN'..."
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Changing variable 'VAR_UTILITY_SCRIPT' from '$VAR_UTILITY_SCRIPT' to '$VAR_UTILITY'..."
    VAR_UTILITY_SCRIPT=$VAR_UTILITY; VAR_UTILITY="BIN"; VAR_RECHECK_ARGUMENTS=1
else
    die_UtilityNotFound "Utility '$VAR_UTILITY' not found!"  
fi
####################################################################################################
# FIND UTILITY FOLDER PATH
####################################################################################################
####################################################################################################
#
####################################################################################################
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH
####################################################################################################
if [[ ! $VAR_UTILITY_SCRIPT_FILE_PATH == "" ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script File Path is already set! No need to search for it..."
elif FindUtilityScriptFilePath "$VAR_UTILITY_FOLDER_PATH" "$VAR_UTILITY_SCRIPT"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script File '$VAR_UTILITY_SCRIPT' found in Utility '$VAR_UTILITY'!"
elif FindUtilityScriptFilePath "$VAR_UTILITY_FOLDER_PATH" "$VAR_UTILITY"; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Utility Script '$VAR_UTILITY' found in Utility '$VAR_UTILITY'!"
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Changing variable 'VAR_UTILITY_SCRIPT' from '$VAR_UTILITY_SCRIPT' to '$VAR_UTILITY'..."
    VAR_UTILITY_SCRIPT=$VAR_UTILITY; VAR_RECHECK_ARGUMENTS=1
elif [[ $VAR_UTILITY_SCRIPT == "" ]]; then
    die_UtilityScriptNotFound "No Utility Script specified!"
else
    die_UtilityScriptNotFound "Utility Script '$VAR_UTILITY_SCRIPT' not found within Utility '$VAR_UTILITY'!"  
fi
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH
####################################################################################################
####################################################################################################
#
#
if [[ $VAR_RECHECK_ARGUMENTS -eq 1 ]]; then
    ProcessArguments "$@"
fi
#
#
####################################################################################################
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Exporting Utility Script Variables..."
export UTILITY_SCRIPT_VAR_DIR_ETC="$GLOBAL_VAR_DIR_ETC/$(basename $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH))/$(basename $VAR_UTILITY_SCRIPT_FILE_PATH | sed 's/.bash$//')"
#export UTILITY_SCRIPT_VAR_DIR_TMP="$GLOBAL_VAR_DIR_TMP/$(basename $(dirname $VAR_UTILITY_SCRIPT_FILE_PATH))/$(basename $VAR_UTILITY_SCRIPT_FILE_PATH | sed 's/.bash$//')"
export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-$VAR_UTILITY-$VAR_UTILITY_SCRIPT.XXXXXXXX" --tmpdir)
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PRINT CONFIG 
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Printing configuration..."
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "GLOBAL_VAR_DIR_INSTALLATION  = $GLOBAL_VAR_DIR_INSTALLATION"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "GLOBAL_VAR_DIR_ETC           = $GLOBAL_VAR_DIR_ETC"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "GLOBAL_VAR_DIR_TMP           = $GLOBAL_VAR_DIR_TMP"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY                  = $VAR_UTILITY"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY_SCRIPT           = $VAR_UTILITY_SCRIPT"
#
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY_FOLDER_PATH      = $VAR_UTILITY_FOLDER_PATH"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "VAR_UTILITY_SCRIPT_FILE_PATH = $VAR_UTILITY_SCRIPT_FILE_PATH"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "UTILITY_SCRIPT_VAR_DIR_ETC   = $UTILITY_SCRIPT_VAR_DIR_ETC"
PrintMessage "CONFIG" "mitchell" "vanbijleveld" "UTILITY_SCRIPT_VAR_DIR_TMP   = $UTILITY_SCRIPT_VAR_DIR_TMP"
####################################################################################################
# PRINT CONFIG 
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
if [[ $VAR_SKIP_DEPENDENCY_CHECK -eq 1 ]]; then
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Skipping dependency check..."
else
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Fetching dependencies from utility script..."
    eval_FromFile "VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS" $VAR_UTILITY_SCRIPT_FILE_PATH
    PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Starting script to check dependencies..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/CheckDependencies.bash" $VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS "--run-in-background"
    #
    if [[ $? -eq 1 ]]; then
        PrintMessage "FATAL" "mitchell" "vanbijleveld" "Could not start Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because dependencies are missing. Exiting..."
        exit 1
    fi
fi
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# START UTILITY SCRIPT
####################################################################################################
PrintMessage "DEBUG" "mitchell" "vanbijleveld" "Starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' with arguments: $(printf "'%s' " "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}")"
$(which bash) $VAR_UTILITY_SCRIPT_FILE_PATH "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}"