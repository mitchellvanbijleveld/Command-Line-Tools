#!/bin/bash
#
####################################################################################################
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
export BIN_UTILITY="mitchell"
export BIN_UTILITY_SCRIPT="vanbijleveld"
BIN_UTILITY_SCRIPT_VERSION="2025.06.07-2225"
BIN_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS="awk basename bash break date dirname echo eval exit export find grep mktemp printf PrintMessage realpath sed shasum shift source tee tr type which"
UTILITY_SCRIPT_CONFIGURATION_VARS="LogLevel UpdateFirst"
BIN_PRODUCT_NAME="Mitchell van Bijleveld Command Line Tools"
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# SOURCE FUNCTION 'PrintMessage'
####################################################################################################
if ! declare -F PrintMessage > /dev/null; then
    source "$(dirname $(realpath $0))/.mitchellvanbijleveld/PrintMessage.bash"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Function 'PrintMessage' has been sourced."
else    
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Function 'PrintMessage' is already available."
fi
####################################################################################################
# SOURCE FUNCTION 'PrintMessage'
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
# PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting $BIN_PRODUCT_NAME with Argument List: $(printf "'%s' " "$@")"
#
if [[ -z $GLOBAL_VAR_DIR_INSTALLATION ]]; then
    export GLOBAL_VAR_DIR_INSTALLATION=$(dirname $(realpath $0))
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Export Global Variable 'GLOBAL_VAR_DIR_INSTALLATION' with value '$GLOBAL_VAR_DIR_INSTALLATION'."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Global Variable 'GLOBAL_VAR_DIR_INSTALLATION' is already exported."
fi
#
if [[ -z $GLOBAL_VAR_DIR_ETC ]]; then
    export GLOBAL_VAR_DIR_ETC="/etc/mitchellvanbijleveld/Command-Line-Tools"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Export Global Variable 'GLOBAL_VAR_DIR_ETC' with value '$GLOBAL_VAR_DIR_ETC'."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Global Variable 'GLOBAL_VAR_DIR_ETC' is already exported."
fi
#
if [[ -z $GLOBAL_VAR_DIR_TMP ]]; then
    export GLOBAL_VAR_DIR_TMP="/tmp/mitchellvanbijleveld/Command-Line-Tools"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Export Global Variable 'GLOBAL_VAR_DIR_TMP' with value '$GLOBAL_VAR_DIR_TMP'."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Global Variable 'GLOBAL_VAR_DIR_TMP' is already exported."
fi
#
#
#
if [[ -f "$GLOBAL_VAR_DIR_ETC/LogLevel" ]]; then
    case $(cat "$GLOBAL_VAR_DIR_ETC/LogLevel" | tr '[:lower:]' '[:upper:]') in
        'DEBUG')
            if [[ -z $GLOBAL_VAR_DEBUG ]]; then
                export GLOBAL_VAR_DEBUG=1
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Restart $BIN_PRODUCT_NAME to enable debug logging..."
                # shift;
                $(which bash) $(realpath $0) "$@"; exit 0
            else
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Debug logging is already enabled..."
            fi
        ;;
        'VERBOSE')
            if [[ -z $GLOBAL_VAR_VERBOSE ]]; then
                export GLOBAL_VAR_VERBOSE=1
                PrintMessage "VERBOSE" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Restart $BIN_PRODUCT_NAME to enable verbose logging..."
                # shift; 
                $(which bash) $(realpath $0) "$@"; exit 0
            else
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Verbose logging is already enabled..."
            fi
        ;;
        *)
            PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "No valid default log level."
        ;;
    esac
fi
#
if [[ -f "$GLOBAL_VAR_DIR_ETC/UpdateFirst" ]]; then
    VAR_UPDATE_FIRST=$(cat "$GLOBAL_VAR_DIR_ETC/UpdateFirst")
fi
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
while [[ $1 == "--"* ]]; do
    CAPS_1=$(echo $1 | tr '[:lower:]' '[:upper:]')
    #
    case $CAPS_1 in
        "--DEBUG")
            if [[ -z $GLOBAL_VAR_DEBUG ]]; then
                export GLOBAL_VAR_DEBUG=1
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Restart $BIN_PRODUCT_NAME to enable debug logging..."
                shift; $(which bash) $(realpath $0) "$@"; exit 0
            else
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Debug logging is already enabled..."
            fi
        ;;
        "--DRY-RUN")
            if [[ -z $GLOBAL_VAR_DRY_RUN ]]; then
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Enabling Dry Mode. Commands will not be executed..."
                export GLOBAL_VAR_DRY_RUN=1
            else
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Dry Mode is already enabled..."
            fi
        ;;
        "--HELP")
            VAR_UTILITY="Help"
            VAR_UTILITY_SCRIPT="Help"
        ;;
        "--INTERACTIVE" | "--INTERACTIVESHELL" | "--INTERACTIVE-SHELL" | "--IS")
            export VAR_UTILITY="InteractiveShell"
            export VAR_UTILITY_SCRIPT="InteractiveShell"
        ;;
        "--SKIP-DEPENDENCY-CHECK")
            if [[ -z $BIN_SKIP_DEPENDENCY_CHECK ]]; then
                BIN_SKIP_DEPENDENCY_CHECK=1
                PrintMessage "VERBOSE" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script Dependency Check will be skipped..."
            else
                PrintMessage "VERBOSE" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script Dependency Check will be skipped..."
            fi
        ;;
        "--UPDATE-FIRST")
            VAR_UPDATE_FIRST=1
        ;;
        "--VERBOSE")
            if [[ -z $GLOBAL_VAR_VERBOSE ]]; then
                export GLOBAL_VAR_VERBOSE=1
                PrintMessage "VERBOSE" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Restart $BIN_PRODUCT_NAME to enable verbose logging..."
                shift; $(which bash) $(realpath $0) "$@"; exit 0
            else
                PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Verbose logging is already enabled..."
            fi
        ;;
        "--"*)
            PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Unrecognized flag '$1'. Exiting..."
            exit 1
        ;;
    esac
    #
    shift
    #
done
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# SOURCE FUNCTIONS
####################################################################################################
source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/die_ProcessArguments_InvalidFlag.bash"
source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/eval_FromFile.bash"
source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/ForEachUtilityScript.bash"
####################################################################################################
# SOURCE FUNCTIONS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# UPDATE FIRST IF REQUESTED
####################################################################################################
if [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "BIN" ]] && [[ $VAR_UTILITY_SCRIPT == "UPDATE" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not updating automatically because 'bin' 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "UPDATE" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not updating automatically because 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Updating bin, utilities and utility scripts..."
    #
    export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-bin-update-before-run.XXXXXXXX" --tmpdir)
    #
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Running update script..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/update.bash"
    export VAR_UPDATE_DONE=1

    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin will be restarted in order to complete the update..."
    export BIN_RESTARTED=1
    "$(realpath $0)" "$@"
    exit 0
fi
####################################################################################################
# UPDATE FIRST IF REQUESTED
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH IN ARGUMENTS
####################################################################################################
if [[ -z $VAR_UTILITY && -z $VAR_UTILITY_SCRIPT && -z $VAR_UTILITY_SCRIPT_FILE_PATH ]]; then
    source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/Find/UtilityScriptFilePath.bash"
elif [[ -n $VAR_UTILITY && -n $VAR_UTILITY_SCRIPT && -z $VAR_UTILITY_SCRIPT_FILE_PATH ]]; then
    source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/Find/UtilityScriptFilePath.bash" "$VAR_UTILITY" "$VAR_UTILITY_SCRIPT"
fi
#
if [[ ! -f $VAR_UTILITY_SCRIPT_FILE_PATH ]]; then
    exit 1
fi
####################################################################################################
# FIND UTILITY SCRIPT FILE PATH IN ARGUMENTS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Exporting Utility Script Variables..."
#
export UTILITY_SCRIPT_VAR_DIR_ETC="$GLOBAL_VAR_DIR_ETC/$VAR_UTILITY/$VAR_UTILITY_SCRIPT"
export UTILITY_SCRIPT_VAR_DIR_TMP="$GLOBAL_VAR_DIR_TMP/$VAR_UTILITY/$VAR_UTILITY_SCRIPT"
#
export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-$(echo $VAR_UTILITY | sed 's|/|-|')-$VAR_UTILITY_SCRIPT.XXXXXXXX" --tmpdir)
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PRINT CONFIG 
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "PRint Configuration:"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_INSTALLATION  = $GLOBAL_VAR_DIR_INSTALLATION"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_ETC           = $GLOBAL_VAR_DIR_ETC"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_TMP           = $GLOBAL_VAR_DIR_TMP"
#
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY                  = $VAR_UTILITY"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_SCRIPT           = $VAR_UTILITY_SCRIPT"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_FOLDER_PATH      = $VAR_UTILITY_FOLDER_PATH"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_SCRIPT_FILE_PATH = $VAR_UTILITY_SCRIPT_FILE_PATH"
#
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "UTILITY_SCRIPT_VAR_DIR_ETC   = $UTILITY_SCRIPT_VAR_DIR_ETC"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "UTILITY_SCRIPT_VAR_DIR_TMP   = $UTILITY_SCRIPT_VAR_DIR_TMP"
####################################################################################################
# PRINT CONFIG 
####################################################################################################
####################################################################################################
#
#
if [[ $(shasum $VAR_UTILITY_SCRIPT_FILE_PATH | awk '{print $1}') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709' ]]; then
    PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because it's empty. Exiting..."
    exit 0
fi
#
#
####################################################################################################
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
if [[ $BIN_SKIP_DEPENDENCY_CHECK -eq 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Skipping Utility Script Dependency Check..."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Fetching dependencies from utility script..."
    eval_FromFile "VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS" $VAR_UTILITY_SCRIPT_FILE_PATH
    #
    if [[ -z $VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS ]]; then
        PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Could not find required command line tools. Utility Script will not start to prevent failures."
        exit 1        
    fi
    #
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting script to check dependencies..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/CheckDependencies.bash" $VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS "--run-in-background"
    #
    if [[ $? -eq 1 ]]; then
        PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Could not start Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because dependencies are missing. Exiting..."
        exit 1
    fi
fi
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# LOAD UTILITY SCRIPT CONFIGURATION
####################################################################################################
eval_FromFile "UTILITY_SCRIPT_CONFIGURATION_VARS" $VAR_UTILITY_SCRIPT_FILE_PATH
#
if [[ -z $UTILITY_SCRIPT_CONFIGURATION_VARS ]]; then

    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "No Configuraion Variables for Utility Script $VAR_UTILITY/$VAR_UTILITY_SCRIPT..."

else

    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Utility Script $VAR_UTILITY/$VAR_UTILITY_SCRIPT has specified configuration variables..."

    for CONFIGURATION_VAR in $UTILITY_SCRIPT_CONFIGURATION_VARS; do

        if [[ ! -f "$UTILITY_SCRIPT_VAR_DIR_ETC/$CONFIGURATION_VAR" ]]; then
            PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Setting '$CONFIGURATION_VAR' will not be configured because there is not config file..."
            continue
        fi

        PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Process Configuration: Set 'UTILITY_SCRIPT_VAR_$CONFIGURATION_VAR' to '$(cat "$UTILITY_SCRIPT_VAR_DIR_ETC/$CONFIGURATION_VAR")'..."
        eval "export UTILITY_SCRIPT_VAR_${CONFIGURATION_VAR}=\"$(cat "$UTILITY_SCRIPT_VAR_DIR_ETC/$CONFIGURATION_VAR")\""

    done

fi
####################################################################################################
####################################################################################################
# LOAD UTILITY SCRIPT CONFIGURATION
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# START UTILITY SCRIPT
####################################################################################################
if [[ -z $@ ]]; then
    PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT'..."
else
    PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' with Argument List: $(echo $(printf "'%s' " "$@"))..."
fi
PrintMessage "INFO" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "=================================================="
PrintMessage
$(which bash) $VAR_UTILITY_SCRIPT_FILE_PATH "$@"