#!/bin/bash
#
####################################################################################################
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
export BIN_UTILITY="mitchell"
export BIN_UTILITY_SCRIPT="vanbijleveld"
BIN_UTILITY_SCRIPT_VERSION="2025.02.07-1325"
BIN_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS="awk basename bash break date dirname echo eval exit export find grep mktemp printf PrintMessage realpath sed shasum shift source tee tr type which"
BIN_UTILITY_SCRIPT_CONFIGURABLE_SETTINGS="LogLevel"
####################################################################################################
# BIN INFO - MITCHELL/VANBIJLEVELD
####################################################################################################
####################################################################################################
#
#
for var_argument in "$@"; do 
    if [[ $(echo $var_argument | tr '[:lower:]' '[:upper:]') == "--DEBUG" ]]; then
        if [[ -z $GLOBAL_VAR_DEBUG ]]; then
            echo "Flag '--DEBUG' found in arguments!"; export GLOBAL_VAR_DEBUG=1; break
        fi
    fi
done
#
if ! declare -F PrintMessage > /dev/null; then
    source "$(dirname $(realpath $0))/.mitchellvanbijleveld/PrintMessage.bash"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Function 'PrintMessage' has been sourced."
else    
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Function 'PrintMessage' is already available."
fi
#
#
####################################################################################################
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
if [[ -z $GLOBAL_VAR_DIR_INSTALLATION ]]; then
    export GLOBAL_VAR_DIR_INSTALLATION=$(dirname $(realpath $0))
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Export Global Variable 'GLOBAL_VAR_DIR_INSTALLATION' with value '$GLOBAL_VAR_DIR_INSTALLATION'."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Global Variable 'GLOBAL_VAR_DIR_INSTALLATION' is already exported."
fi
#
if [[ -z $GLOBAL_VAR_DIR_ETC ]]; then
    export GLOBAL_VAR_DIR_ETC="/etc/mitchellvanbijleveld/Command-Line-Tools"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Export Global Variable 'GLOBAL_VAR_DIR_ETC' with value '$GLOBAL_VAR_DIR_ETC'."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Global Variable 'GLOBAL_VAR_DIR_ETC' is already exported."
fi
#
if [[ -z $GLOBAL_VAR_DIR_TMP ]]; then
    export GLOBAL_VAR_DIR_TMP="/tmp/mitchellvanbijleveld/Command-Line-Tools"
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Export Global Variable 'GLOBAL_VAR_DIR_TMP' with value '$GLOBAL_VAR_DIR_TMP'."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Global Variable 'GLOBAL_VAR_DIR_TMP' is already exported."
fi
####################################################################################################
# DEFAULT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
#
##################################################
##################################################
# FIND UTILITY SCRIPT FILE PATH IN ARGUMENTS
##################################################
if [[ -z $VAR_UTILITY && -z $VAR_UTILITY_SCRIPT ]]; then
    source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/Find/UtilityScriptFilePath.bash"
fi
##################################################
# FIND UTILITY SCRIPT FILE PATH IN ARGUMENTS
##################################################
##################################################
VAR_UTILITY_SCRIPT_ARGUMENTS=()
#
for var_argument in "$@"; do
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Processing argument '$var_argument'..."
    var_argument_CAPS=$(echo $var_argument | tr '[:lower:]' '[:upper:]')
    #
    case $var_argument_CAPS in
        "--DEBUG")
            PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Flag '--DEBUG' has already been checked."
        ;;
        "--DRY-RUN")
            export GLOBAL_VAR_DRY_RUN=1
        ;;
        "--HELP")
            VAR_UTILITY="Help"
            VAR_UTILITY_SCRIPT="Help"
        ;;
        "--INTERACTIVE" | "--INTERACTIVESHELL" | "--INTERACTIVE-SHELL" | "--IS")
            VAR_UTILITY="InteractiveShell"
            VAR_UTILITY_SCRIPT="InteractiveShell"
        ;;
        "--SKIP-DEPENDENCY-CHECK")
            BIN_SKIP_DEPENDENCY_CHECK=1
        ;;
        "--START-FROM-INTERACTIVE-SHELL")
            if [[ $GLOBAL_VAR_DEBUG -eq 1 ]]; then
                BIN_DISABLE_DEBUG=1
            fi
        ;;
        "--UPDATE-FIRST")
            VAR_UPDATE_FIRST=1
        ;;
        "--VERBOSE")
            export GLOBAL_VAR_VERBOSE=1
        ;;
        "--"*)
            PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Flag '$var_argument_CAPS' will be forwarded to Utility Script."
            VAR_UTILITY_SCRIPT_ARGUMENTS+=("$var_argument")
        ;;
        *)
            PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Argument '$var_argument_CAPS' will be forwarded to Utility Script."
            VAR_UTILITY_SCRIPT_ARGUMENTS+=("$var_argument")
        ;;
    esac
    #
done
####################################################################################################
# PROCESS ARGUMENTS
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# FUNCTIONS
####################################################################################################
# Source 'ForEachUtilityScript'
source "$GLOBAL_VAR_DIR_INSTALLATION/.mitchellvanbijleveld/ForEachUtilityScript.bash"
#
eval_FromFile(){
    # $1 = NAME OF VARIABLE
    # $2 = FILE PATH
    if grep -q "^$1=" "$2"; then
        eval $(grep "^$1=" "$2")
    else
        eval "$1="
    fi
}
export -f eval_FromFile
#
die_ProcessArguments_InvalidFlag(){
    # $1 = FLAG
    PrintMessage "FATAL" "$VAR_UTILITY" "$VAR_UTILITY_SCRIPT" "The provided flag ($1) is not supported. Exiting..."
    PrintMessage
    exit 1
}
export -f die_ProcessArguments_InvalidFlag
####################################################################################################
# FUNCTIONS
####################################################################################################
####################################################################################################
#
#
#
#
#
if [[ $BIN_DISABLE_DEBUG -eq 1 ]] && [[ $BIN_RESTARTED -ne 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin will be restarted in order to disable debug logging..."
    export GLOBAL_VAR_DEBUG=0
    export BIN_RESTARTED=1; "$(realpath $0)" "$@"; exit 0

elif [[ $BIN_RESTARTED -eq 1 ]]; then
    export BIN_RESTARTED=0
fi
#
if [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "BIN" ]] && [[ $VAR_UTILITY_SCRIPT == "UPDATE" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not updating automatically because 'bin' 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]] && [[ $VAR_UTILITY == "UPDATE" ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not updating automatically because 'update' is already requested by user..."
elif [[ $VAR_UPDATE_FIRST -eq 1 ]] && [[ $VAR_UPDATE_DONE -ne 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Updating bin, utilities and utility scripts..."
    #
    export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-bin-update-before-run.XXXXXXXX" --tmpdir)
    #
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Running update script..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/update.bash"
    export VAR_UPDATE_DONE=1

    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "The bin will be restarted in order to complete the update..."
    export BIN_RESTARTED=1
    "$(realpath $0)" "$@"
    exit 0
fi
#
#
#
#
#
####################################################################################################
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Exporting Utility Script Variables..."
#
export UTILITY_SCRIPT_VAR_DIR_ETC="$GLOBAL_VAR_DIR_ETC/$VAR_UTILITY/$VAR_UTILITY_SCRIPT"
export UTILITY_SCRIPT_VAR_DIR_TMP="$GLOBAL_VAR_DIR_TMP/$VAR_UTILITY/$VAR_UTILITY_SCRIPT"
#
export UTILITY_SCRIPT_VAR_DIR_TMP=$(mktemp -d "mitchellvanbijleveld-$(echo $VAR_UTILITY | sed 's|/|-|')-$VAR_UTILITY_SCRIPT.XXXXXXXX" --tmpdir)
####################################################################################################
# EXPORT UTILITY SCRIPT VARIABLES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# PRINT CONFIG 
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Printing configuration..."
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_INSTALLATION  = $GLOBAL_VAR_DIR_INSTALLATION"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_ETC           = $GLOBAL_VAR_DIR_ETC"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "GLOBAL_VAR_DIR_TMP           = $GLOBAL_VAR_DIR_TMP"
#
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY                  = $VAR_UTILITY"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_SCRIPT           = $VAR_UTILITY_SCRIPT"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_FOLDER_PATH      = $VAR_UTILITY_FOLDER_PATH"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "VAR_UTILITY_SCRIPT_FILE_PATH = $VAR_UTILITY_SCRIPT_FILE_PATH"
#
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "UTILITY_SCRIPT_VAR_DIR_ETC   = $UTILITY_SCRIPT_VAR_DIR_ETC"
PrintMessage "CONFIG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "UTILITY_SCRIPT_VAR_DIR_TMP   = $UTILITY_SCRIPT_VAR_DIR_TMP"
####################################################################################################
# PRINT CONFIG 
####################################################################################################
####################################################################################################
#
#
if [[ $(shasum $VAR_UTILITY_SCRIPT_FILE_PATH | awk '{print $1}') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709' ]]; then
    PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Not starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because it's empty. Exiting..."
    exit 0
fi
#
#
####################################################################################################
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
if [[ $BIN_SKIP_DEPENDENCY_CHECK -eq 1 ]]; then
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Skipping dependency check..."
else
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Fetching dependencies from utility script..."
    eval_FromFile "VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS" $VAR_UTILITY_SCRIPT_FILE_PATH
    PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting script to check dependencies..."
    $(which bash) "$GLOBAL_VAR_DIR_INSTALLATION/bin/CheckDependencies.bash" $VAR_UTILITY_SCRIPT_REQUIRED_COMMAND_LINE_TOOLS "--run-in-background"
    #
    if [[ $? -eq 1 ]]; then
        PrintMessage "FATAL" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Could not start Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' because dependencies are missing. Exiting..."
        exit 1
    fi
fi
####################################################################################################
# CHECK DEPENDENCIES
####################################################################################################
####################################################################################################
#
#
#
#
#
####################################################################################################
####################################################################################################
# START UTILITY SCRIPT
####################################################################################################
PrintMessage "DEBUG" "$BIN_UTILITY" "$BIN_UTILITY_SCRIPT" "Starting Utility '$VAR_UTILITY' Script '$VAR_UTILITY_SCRIPT' with arguments: $(printf "'%s' " "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}")"
$(which bash) $VAR_UTILITY_SCRIPT_FILE_PATH "${VAR_UTILITY_SCRIPT_ARGUMENTS[@]}"